{"version":3,"sources":["SortingVisualizer/SortingVisualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["SortingVisualizer","generateRandomArray","tempArray","i","push","Math","floor","random","setArray","delayed","queue","processQueue","length","setTimeout","shift","cb","delay","setIsProcessing","useEffect","useState","array","time","setTime","isProcessing","className","Box","sx","marginTop","marginBottom","height","map","value","style","Button","disabled","variant","active","onClick","j","arr","slice","arrayBars","document","getElementsByClassName","len","barOneStyle","barTwoStyle","backgroundColor","temp","color","bubbleSortCaller","width","margin","Slider","min","max","track","onChange","event","newTime","console","log","aria-labelledby","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3f2ff1ae.chunk.js","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport './SortingVisualizer.css'\nimport {Box, Button, Slider} from '@material-ui/core';\n\nconst SortingVisualizer = () => {\n\n    function generateRandomArray() {\n        let tempArray = [];\n        for (let i = 0; i < 50; i++) {\n            tempArray.push(Math.floor(Math.random() * (800 - 1 + 5)) + 5);\n        }\n        setArray(tempArray);\n    }\n\n    function mergeSortCaller() {\n\n        return undefined\n    }\n\n    const delayed = (function () {\n        let queue = [];\n\n        function processQueue() {\n            if (queue.length > 0) {\n                setTimeout(function () {\n                    queue.shift().cb();\n                    processQueue();\n                }, queue[0].delay);\n            } else {\n                setIsProcessing(true);\n            }\n        }\n\n        return function delayed(delay, cb) {\n            queue.push({delay: delay, cb: cb});\n\n            if (queue.length === 1) {\n                processQueue();\n            }\n        };\n    }());\n\n    function bubbleSortCaller() {\n\n        setIsProcessing(false);\n        let i = 0, j;\n        let arr = array.slice();\n        let arrayBars = document.getElementsByClassName('array-bar');\n        let len = arr.length;\n        for (; i < len; i += 1) {\n            for (j = 0; j < len - i - 1; j += 1) {\n                delayed(time, function (i, j) {\n                    return function () {\n                        const barOneStyle = arrayBars[j].style;\n                        const barTwoStyle = arrayBars[j + 1].style;\n                        const color = 'red';\n                        barOneStyle.backgroundColor = color;\n                        barTwoStyle.backgroundColor = color;\n                    };\n                }(i, j));\n                delayed(time * 1.25, function (i, j) {\n                    return function () {\n                        if (arr[j] > arr[j + 1]) {\n                            let temp = arr[j]\n                            arr[j] = arr[j + 1];\n                            arr[j + 1] = temp;\n                            const barOneStyle = arrayBars[j].style;\n                            const barTwoStyle = arrayBars[j + 1].style;\n                            barOneStyle.height = `${arr[j]}px`\n                            barTwoStyle.height = `${arr[j + 1]}px`\n                        }\n                    }\n                }(i, j));\n                delayed(time * 1.5, function (i, j) {\n                    return function () {\n                        const barOneStyle = arrayBars[j].style;\n                        const barTwoStyle = arrayBars[j + 1].style;\n                        const color = 'pink';\n                        barOneStyle.backgroundColor = color;\n                        barTwoStyle.backgroundColor = color;\n                    }\n                }(i, j));\n            }\n        }\n    }\n\n    function quickSortCaller() {\n\n        return undefined;\n    }\n\n    function changeTime(event, newTime) {\n\n        setTime(newTime);\n        console.log(time);\n    }\n\n    function isSpeed() {\n\n        if (isProcessing) {\n            return (\n                <div>Speed</div>)\n        } else\n            return (\n                <div className=\"disabled-text\">Speed</div>)\n    }\n\n    useEffect(() => {\n        generateRandomArray();\n    }, []);\n\n    const [array, setArray] = useState([]);\n    const [time, setTime] = useState(100);\n    const [isProcessing, setIsProcessing] = useState(true);\n\n    return (\n        <div className=\"array-container\">\n\n            <Box sx={{marginTop: '10px', marginBottom: '10px', height: '100px'}}>{array.map((value) => <div\n                className=\"array-bar\" style={{height: `${value}px`}}/>)}</Box>\n            <div>\n                <Button disabled={!isProcessing} variant=\"primary\" active onClick={() => generateRandomArray()}>New\n                    Array</Button>\n                <Button disabled={!isProcessing} variant='text' onClick={() => bubbleSortCaller()}> bubble sort</Button>\n                <Button disabled={!isProcessing} onClick={() => mergeSortCaller()}> merge sort</Button>\n                <Button disabled={!isProcessing} onClick={() => quickSortCaller()}> quick sort</Button>\n                <Box sx={{width: 200, margin: 'auto'}}>\n                    {isSpeed()} <Slider min={1} max={1000} value={time} disabled={!isProcessing} track=\"inverted\"\n                                        onChange={changeTime}\n                                        aria-labelledby=\"continuous-slider\"/></Box>\n            </div>\n        </div>\n    );\n}\n\nexport default SortingVisualizer;","import React from \"react\";\nimport './App.css';\nimport SortingVisualizer from \"./SortingVisualizer/SortingVisualizer\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <SortingVisualizer>\n\n            </SortingVisualizer>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}